apiVersion: carto.run/v1alpha1
kind: ClusterConfigTemplate
metadata:
  name: custom-server-template
spec:
  configPath: ".data"
  healthRule:
    alwaysHealthy: {}
  params:
    - default:
        - containerPort: 8080
          name: http
          port: 8080
      name: ports
    - default: "notprovided.aramco.co"
      name: "fqdn"
  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:yaml", "yaml")
    #@ load("@ytt:struct", "struct")
    #@ load("@ytt:assert", "assert")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def httpproxy():
    ---
    apiVersion: projectcontour.io/v1
    kind: HTTPProxy
    metadata:
      name: #@ data.values.workload.metadata.name + "-httpproxy"
      labels: #@ merge_labels({ "app.kubernetes.io/component": "run", "carto.run/workload-name": data.values.workload.metadata.name })
    spec:
      routes:
      - conditions:
        - prefix: #@ "/" + data.values.workload.metadata.name
        pathRewritePolicy:
          replacePrefix:
          - prefix: #@ "/" + data.values.workload.metadata.name
            replacement: "/"
        services:
        - name: #@ data.values.workload.metadata.name
          port: 8080
      virtualhost:
        fqdn: #@ data.values.params.fqdn
    #@ end
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: #@ data.values.workload.metadata.name + "-server"
      labels: #@ merge_labels({ "app.kubernetes.io/component": "config" })
    data:
      delivery.yml: #@ yaml.encode(httpproxy())
